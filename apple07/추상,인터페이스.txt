개념 정의 : 제어의 역행
(Inversion of Control : Ioc)

구현 정의 : 의존성 주입
(Dependency Injection : DI)
-싱글톤
DAO dao = new DAO(); //객체주소를 프로그래머가 만듦.

@Repository => 객체주소를 Spring이 만듦.
public class DAO{
	-------
}

타입으로 만들어진 객체의 주소를 찾아서 내가 만들어놓은 변수(dao)에다 넣어준다.
의존성 주입
@Autowired
DAO dao;

dao.insert();

의존성이 구체적으로 나타날수록 수정이 많이 필요한 코드가 되어버림.

public Car{
	WoodWindow w;
	wheel wh;
}

인터페이스와 추상클래스의 관계
공통점
----------------
- 추상 메소드를 가진다.
- 객체 생성 불가능 
- 타입으로 쓸 수 있다.
  (업캐스팅의 대상이 된다.)

차이점
---------------
- 변수(추상 O,인터페이스 X)
- 일반메소드(추상 O, 인터페이스 X)


1.자바 프로젝트를 설계시 주의해야할 점 2가지 (설계 원칙)
 - 결합도 를 낮추고, 응집도를 높이는것.

2. 결합도를 낮추는 방법 2가지
- interface를 사용함
- 형변환을 사용함
- Factor기법을 사용 

3. context파일이란, 역할
- factory 파일, 객체를 생성해주는 역할

4. spring container라고 부르는 이유는?
- 스프링에서 객체를 생성하고 객체를 서로 연결해주고 관리해줘서.

5. IOC란?
- Inversion of Control -> 개념 정의 : 제어의 역행

6. DI란?
- Dependency Injection -> 구현 정의: 의존성 주입

7. 결합도와 의존성이란?

결합도 ->  클래스간의 서로 다른 역할이 얽혀있는 정도
의존성 -> 객체를 생성할 때 생성하는 객체와 생성되는 변수사이의 관계